package ${package}.${project}.service.biz.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Map;
import ${package}.${project}.persistence.mapper.${className}Mapper;
import ${package}.${project}.service.biz.${className}BizService;
import ${package}.${project}.persistence.bean.${className};
import ${package}.${project}.api.bo.${className}BO;
import ${package}.${project}.api.vo.${className}VO;
import ${package}.${project}.api.vo.${className}PageVO;
import ${package}.${project}.api.bo.${className}PageQueryBO;
import javax.annotation.Resource;
import ${package}.core.copiers.Copiers;
import org.springframework.transaction.annotation.Transactional;
import ${package}.core.datasource.annotation.TargetDataSource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.ObjectUtils;
import com.aek.core.util.AekListUtil;
import java.util.ArrayList;
import com.baomidou.mybatisplus.plugins.Page;

/** 
 * @Description ${service}
 * @author ansen.zhu
 * @date ${datetime}
 */
@Service
@Transactional(rollbackFor = Exception.class)
public class ${className}BizServiceImpl implements ${className}BizService {

	private static final Logger LOGGER = LoggerFactory.getLogger(${className}BizServiceImpl.class);

	@Resource
    private  ${className}Mapper ${classname}Mapper;

    @Override
    @TargetDataSource(name = "readDataSource")
    public ${className}VO get(${pk.javaDataType} ${pk.lowercaseAttrName}) {
    	${className}VO ${classname}VO=new ${className}VO();
    	${className} ${classname} = ${classname}Mapper.get(${pk.lowercaseAttrName});
    	if (${classname} != null) {
    		${classname}VO = Copiers
            	.create(${className}.class, ${className}VO.class)
            	.copy(${classname});
         }
         
         return ${classname}VO;
    }

    @Override
    @TargetDataSource(name = "readDataSource")
    public List<${className}VO> list(Map<String, Object> map) {
        List<${className}VO> result;
        List<${className}> ${classname}s;
        ${classname}s = ${classname}Mapper.list(map);
        if (AekListUtil.isNotEmpty(${classname}s)) {
        	result = Copiers
 				.createMapper(${className}.class, ${className}VO.class)
 				.register()
 				.map(${classname}s);
 		} else {
 			result = new ArrayList<>(0);
 		}
 		return result;
    }

	@Override
    @TargetDataSource(name = "readDataSource")
	public ${className}PageVO page(Page<${className}> page, ${className}PageQueryBO ${classname}PageQueryBO){
	
		final List<${className}> ${classname}s = ${classname}Mapper.page(page,${classname}PageQueryBO);
        // 设置返回对象
        final ${className}PageVO pageVO =
                        new ${className}PageVO(page.getCurrent(), page.getSize(), page.getTotal());
        if (${classname}s != null && !${classname}s.isEmpty()) {
            pageVO.set${className}s(Copiers.create(${className}.class, ${className}VO.class)
                            .map(${classname}s));
        }
        return pageVO;
	}

    @Override
    public int count(Map<String, Object> map) {
        return ${classname}Mapper.count(map);
    }

    @Override
    @TargetDataSource(name = "writeDataSource")
    public int save(${className}BO ${classname}BO) {
    	${className} ${classname} = Copiers.create(${className}BO.class, ${className}.class).copy(${classname}BO);
    	${classname}.settingCreatingDefaultValue(${classname}BO.getOperateBy(), ${classname}BO.getOperateName());
        return ${classname}Mapper.save(${classname});
    }

    @Override
    @TargetDataSource(name = "writeDataSource")
    public int update(${className}BO ${classname}BO) {
    	${className} ${classname} = Copiers.create(${className}BO.class, ${className}.class).copy(${classname}BO);
    	${classname}.settingCreatingDefaultValue(${classname}BO.getOperateBy(), ${classname}BO.getOperateName());
        return ${classname}Mapper.update(${classname});
    }

    @Override
    @TargetDataSource(name = "writeDataSource")
    public int remove(${pk.javaDataType} ${pk.lowercaseAttrName}) {
        return ${classname}Mapper.remove(${pk.lowercaseAttrName});
    }

    @Override
    @TargetDataSource(name = "writeDataSource")
    public int batchRemove(${pk.javaDataType}[] ${pk.lowercaseAttrName}) {
        return ${classname}Mapper.batchRemove(${pk.lowercaseAttrName});
    }

}
