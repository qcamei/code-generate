package ${package}.${project}.persistence.bean;

import java.io.Serializable;
import java.util.Date;
import java.math.BigDecimal;
import ${package}.core.persistence.bean.AbstractBean;
import ${package}.core.util.UUIDUtil;

/** 
 * @Description ${domain}
 * @author ansen.zhu
 * @date ${datetime}
 */
public class ${className} extends AbstractBean {
    private static final long serialVersionUID = 1L;

#foreach ($column in $columns)
    private $column.javaDataType $column.lowercaseAttrName;
#end

	@Override
    public void settingCreatingDefaultValue(final String addBy, final String addName) {
        super.settingCreatingDefaultValue(addBy, addName);
        ${modelname}Id = UUIDUtil.get32UpperCaseUUID();
    }

#foreach ($column in $columns)
    public $column.javaDataType get${column.uppercaseAttrName}(){
    	return $column.lowercaseAttrName;
    }
    
    
    public void set${column.uppercaseAttrName}($column.javaDataType $column.lowercaseAttrName){
    	#if("$column.javaDataType" == "String")
    	this.${column.lowercaseAttrName} = ${column.lowercaseAttrName} == null ? null : ${column.lowercaseAttrName}.trim();
    	#else
    	this.${column.lowercaseAttrName} = ${column.lowercaseAttrName};
    	#end
    }
#end
	
	@Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Hash = ").append(hashCode());
        sb.append(", id=").append(id);
    #foreach ($column in $columns)
    sb.append(",${column.lowercaseAttrName}=").append(${column.lowercaseAttrName});
    #end
        sb.append(", serialVersionUID=").append(serialVersionUID);
        sb.append("]");
        return sb.toString();
    }
}
